# Encapsulates an asynchronous task. Must live at least until the task finishes
# or until it is canceled. If its destructor is called, it will call cancel().
AsyncTask = interface +c {
	# Tells the asynchronous task to finish, but doesn't wait for termination.
	# Stops all callbacks, even if the task continues to run.
	# Thread safe.
	cancel();

	# Returns true iff the task has finished its work.
	# Thread safe.
	isDone(): bool;

	# Blocks until the task has finished executing.
	# Thread safe.
	waitUntilDone();

	# Blocks until the task has finished executing or until the timeout has
	# expired. Returns false on timeout, true otherwise.
	# Thread safe.
	waitForMs(timeout: i32): bool;
}

