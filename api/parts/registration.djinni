@import "address.djinni"
@import "asynctask.djinni"
@import "errors.djinni"
@import "masterkey.djinni"

# Can be obtained through Client.generateKeysAsync().
Registration = interface +c {
	# Register a new account.
	#
	# acceptedTerms is the url of the accepted terms of service.
	# Set null if no terms are accepted.
	#
	# Set challenge to the value passed to
	# RegistrationRegisterAccountListener::challengeNeeded if you recently sent
	# a registration request for the same address that failed because of a
	# missing or wrong challenge answer. Otherwise, just pass null.
	#
	# If no challenge is needed, set challengeAnswer to ""
	registerAccountAsync(
		address: Address,
		acceptedTerms: optional<string>,
		challenge: optional<Challenge>,
		challengeAnswer: string,
		listener: RegistrationRegisterAccountListener): AsyncTask;
}

# Listener used in Registration.registerAccountAsync()
RegistrationRegisterAccountListener = interface +j +o {
	challengeNeeded(address: Address, challenge: Challenge);
	addressNotAvailable(address: Address, reason: AddressNotAvailableReason);
	finished(address: Address, masterKey: MasterKey);
	error(address: Address, error: NetworkError);
}

Challenge = interface +c {
	type(): ChallengeType;
	text(): string;
}

ChallengeType = enum {
	Code;
	Reservation;
	Reset;
}

AddressNotAvailableReason = enum {
	Blocked;
	Exists;
}

