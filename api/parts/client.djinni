# A Client is the entry point to most of libkullo.
Client = interface +c {
	# Create a new Client instance. You will most probably only need one.
	static create(): Client;

	# Opens a session for the given user. dbFilePath is the absolute path to the
	# database file, including the filename. The folder must exist, and it must
	# be possible for the current user to create files in it. The file itself is
	# created if it doesn't already exist.
	#
	# Attention: Don't ever re-use the same DB file for multiple accounts!
	createSessionAsync(
		address: Address,
		masterKey: MasterKey,
		dbFilePath: string,
		sessionListener: SessionListener,
		listener: ClientCreateSessionListener): AsyncTask;

	# Check whether an address exists.
	addressExistsAsync(
		address: Address,
		listener: ClientAddressExistsListener): AsyncTask;

	# Check whether the master key is valid for the given address.
	checkCredentialsAsync(
		address: Address,
		masterKey: MasterKey,
		listener: ClientCheckCredentialsListener): AsyncTask;

	# Generate new keys, which is the first step to registering an account.
	generateKeysAsync(listener: ClientGenerateKeysListener): AsyncTask;

	# Returns pairs of <library name, version number> for the libraries used.
	versions(): map<string, string>;

	# Constants for the use with versions()
	const BOTAN: string = "Botan";
	const BOOST: string = "Boost";
	const JSONCPP: string = "JsonCpp";
	const LIBKULLO: string = "libkullo";
	const SMARTSQLITE: string = "SmartSqlite";
	const SQLITE: string = "SQLite";
}

# Listener used in Client.createSessionAsync()
ClientCreateSessionListener = interface +j +o {
	migrationStarted(address: Address);
	finished(session: Session);
	error(address: Address, error: LocalError);
}

# Listener used in Client.addressExistsAsync()
ClientAddressExistsListener = interface +j +o {
	finished(address: Address, exists: bool);
	error(address: Address, error: NetworkError);
}

# Listener used in Client.checkCredentialsAsync()
ClientCheckCredentialsListener = interface +j +o {
	finished(address: Address, masterKey: MasterKey, valid: bool);

	# Network errors except NetworkError.Unauthorized, which is handled
	# by finished()
	error(address: Address, error: NetworkError);
}

# Listener used in Client.generateKeysAsync()
ClientGenerateKeysListener = interface +j +o {
	# Progress of key generation, in percent.
	progress(progress: i8);

	# Called when key generation is done. Use registration to register an
	# account.
	finished(registration: Registration);
}
