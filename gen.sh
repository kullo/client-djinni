#!/bin/bash
set -o errexit -o nounset -o pipefail
command -v shellcheck > /dev/null && shellcheck "$0"

SOURCES_LIST_FILENAME="source_files.cmake"

if [[ $# != 1 ]]; then
	echo "Usage: $0 DIR"
	echo "Example: $0 api"
	exit 1
fi

GREP="grep"
if [[ "$(uname)" == "Darwin" ]]; then
	GREP=ggrep
	if ! command -v "$GREP" > /dev/null; then
		echo -e "We need GNU grep. BSD grep as shipped by OS X isn't supported. Install:"
		echo -e '\tbrew install grep'
		exit 1
	fi
fi

SED="sed"
if [[ "$(uname)" == "Darwin" ]]; then
	SED=gsed
	if ! command -v "$SED" > /dev/null; then
		echo -e "We need GNU sed. BSD sed as shipped by OS X isn't supported. Install:"
		echo -e '\tbrew install gnu-sed'
		exit 1
	fi
fi

function list_autogenerated {
    if [ -d "$1" ]; then
    	"$GREP" --recursive --files-with-matches --line-regexp --perl-regexp --null \
	    	'(//|#) AUTOGENERATED FILE - DO NOT MODIFY!' "$1"
    fi
}

function delete_autogenerated {
	list_autogenerated "$1" | xargs -0 rm
}

# shellcheck disable=SC1090
source "$1/config"

TMP_PREFIX="/tmp/djinni"
[ -d "$TMP_PREFIX" ] && rm -r "$TMP_PREFIX"
TMP_CPP_OUT="$TMP_PREFIX/cpp"
TMP_OBJC_OUT="$TMP_PREFIX/objc"
TMP_JNI_OUT="$TMP_PREFIX/jni"
TMP_JAVA_OUT="$TMP_PREFIX/java"
mkdir -p "$TMP_CPP_OUT"
mkdir -p "$TMP_OBJC_OUT"
mkdir -p "$TMP_JNI_OUT"
mkdir -p "$TMP_JAVA_OUT"

#delete_autogenerated "$CPP_OUT" || true
#delete_autogenerated "$OBJC_OUT" || true
#delete_autogenerated "$JNI_OUT" || true
#delete_autogenerated "$JAVA_OUT" || true
djinni/src/run \
	--cpp-out "$TMP_CPP_OUT" \
	--hpp-ext h \
	--cpp-include-prefix "$CPP_INCLUDE_PREFIX" \
	--cpp-extended-record-include-prefix "$CPP_EXTENDED_RECORD_INCLUDE_PREFIX" \
	--cpp-namespace "$CPP_NAMESPACE" \
	--cpp-optional-template "boost::optional" \
	--cpp-optional-header "<boost/optional.hpp>" \
	--cpp-nn-header "<kulloclient/nn.h>" \
	--cpp-nn-type "::Kullo::nn_shared_ptr" \
	--cpp-nn-check-expression "kulloForcedNn" \
	--ident-cpp-enum FooBar \
	\
	--objc-out "$TMP_OBJC_OUT" \
	--objc-type-prefix "$OBJC_PREFIX" \
	\
	--objcpp-out "$TMP_OBJC_OUT" \
	--objcpp-include-cpp-prefix "$CPP_INCLUDE_PREFIX" \
	--objcpp-namespace "ObjCpp::$CPP_NAMESPACE" \
	\
	--jni-out "$TMP_JNI_OUT" \
	--jni-include-cpp-prefix "$CPP_INCLUDE_PREFIX" \
	--jni-base-lib-include-prefix "$SUPPORTLIB_JNI_INCLUDE_PREFIX" \
	--jni-namespace "JNI::$CPP_NAMESPACE" \
	\
	--java-out "$TMP_JAVA_OUT" \
	--java-package "$JAVA_PACKAGE" \
	--java-nullable-annotation "android.support.annotation.Nullable" \
	--java-nonnull-annotation "android.support.annotation.NonNull" \
	\
	--idl "$SOURCE"

# BEGIN Fix up C++ code for MSVC <= 2015

MSVC_PREFIX="#if !defined(_MSC_VER) || _MSC_VER > 1900"
MSVC_SUFFIX="#endif"

# find defaulted move constructors and disable them
list_autogenerated "$TMP_CPP_OUT" | xargs -0 $SED --regexp-extended --in-place \
	"s/^\\s*(\\w+)\\(\\1&&\\) = default;\$/$MSVC_PREFIX\\n\\0\\n$MSVC_SUFFIX/"

# find defaulted move assignment operators and disable them
list_autogenerated "$TMP_CPP_OUT" | xargs -0 $SED --regexp-extended --in-place \
	"s/^\\s*(\\w+)& operator=\\(\\1&&\\) = default;\$/$MSVC_PREFIX\\n\\0\\n$MSVC_SUFFIX/"

# END Fix up C++ code for MSVC


# BEGIN Fix up ObjC include paths

# remove "../" from include path for extended structs
list_autogenerated "$TMP_OBJC_OUT" | xargs -0 $SED --regexp-extended --in-place \
	"s/#import \"\\.\\.\\/(.*)\"\$/#import \"\\1\"/"

# END Fix up ObjC include paths

rsync --archive --checksum --no-times --delete --filter "protect impl_static"  "$TMP_CPP_OUT/" "$CPP_OUT"
rsync --archive --checksum --no-times --delete "$TMP_OBJC_OUT/" "$OBJC_OUT"
rsync --archive --checksum --no-times --delete "$TMP_JNI_OUT/" "$JNI_OUT"
rsync --archive --checksum --no-times --delete "$TMP_JAVA_OUT/" "$JAVA_OUT"

rsync --archive --delete --delete-excluded \
	--include="*.hpp" --include="*.cpp" --include="/jni" --exclude="*" \
	djinni/support-lib/ "$SUPPORTLIB_JNI"
rsync --archive --delete --delete-excluded \
	--include="*.hpp" --include="*.cpp" --include="*.h" --include="*.mm" --include="/objc" --exclude="*" \
	djinni/support-lib/ "$SUPPORTLIB_OBJC"

component=$(basename "$JNI_OUT")
function lssorted() {
	WORK_PATH="$1"
	shift
	(
		cd "$(dirname "$WORK_PATH")"
		find "$(basename "$WORK_PATH")" -type f "$@" | LC_COLLATE=C sort
	)
}
cpp_files=$(lssorted "$CPP_OUT" -not \( -path "api/impl_*" -prune \))
#objc_files=$(lssorted "$OBJC_OUT")
#objc_public_headers=$(lssorted "$OBJC_OUT" -regex "[^+]*\\.h")
jni_files=$(lssorted "$JNI_OUT")
jni_supportlib_files=$(lssorted "$SUPPORTLIB_JNI")

cat <<EOF > "$CPP_OUT/$SOURCES_LIST_FILENAME"
# AUTOGENERATED FILE - DO NOT MODIFY!
set(${component}_cpp_source_files
$cpp_files
)
EOF

cat <<EOF > "$JNI_OUT/$SOURCES_LIST_FILENAME"
# AUTOGENERATED FILE - DO NOT MODIFY!
set(${component}_jni_source_files
$jni_files
)
EOF

cat <<EOF > "$SUPPORTLIB_JNI/$SOURCES_LIST_FILENAME"
# AUTOGENERATED FILE - DO NOT MODIFY!
set(jni_supportlib_source_files
$jni_supportlib_files
)
EOF

